{"ast":null,"code":"import _classCallCheck from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franki/react-state-managment/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franki/react-state-managment/src/Counter.js\";\nimport React, { Component } from 'react';\n\nvar increment = function increment(state, props) {\n  var max = props.max,\n      step = props.step;\n  if (state.count >= max) return;\n  return {\n    count: state.count + step\n  };\n};\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter(props) {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Counter).call(this, props));\n    _this.state = {\n      count: 0\n    };\n    _this.increment = _this.increment.bind(_assertThisInitialized(_this));\n    _this.decrement = _this.decrement.bind(_assertThisInitialized(_this));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"increment\",\n    value: function increment() {\n      var _this2 = this;\n\n      this.setState(function (state, props) {\n        var max = props.max,\n            step = props.step;\n        if (state.count >= max) return;\n        return {\n          count: state.count + step\n        };\n      }, function () {\n        console.log('After', _this2.state);\n      });\n    }\n  }, {\n    key: \"decrement\",\n    value: function decrement() {\n      this.setState({\n        count: this.state.count - 1\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setState({\n        count: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var count = this.state.count;\n      return React.createElement(\"main\", {\n        className: \"Counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, count), React.createElement(\"section\", {\n        className: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Increment\"), React.createElement(\"button\", {\n        onClick: this.decrement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Decrement\"), React.createElement(\"button\", {\n        onClick: this.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Reset\")));\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;","map":{"version":3,"sources":["/home/franki/react-state-managment/src/Counter.js"],"names":["React","Component","increment","state","props","max","step","count","Counter","bind","decrement","reset","setState","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,MAC1BC,GAD0B,GACZD,KADY,CAC1BC,GAD0B;AAAA,MACrBC,IADqB,GACZF,KADY,CACrBE,IADqB;AAElC,MAAGH,KAAK,CAACI,KAAN,IAAeF,GAAlB,EAAuB;AACvB,SAAO;AAAEE,IAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,GAAcD;AAAvB,GAAP;AACD,CAJD;;IAMME,O;;;;;AACJ,mBAAYJ,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKD,KAAL,GAAa;AACXI,MAAAA,KAAK,EAAE;AADI,KAAb;AAIA,UAAKL,SAAL,GAAiB,MAAKA,SAAL,CAAeO,IAAf,+BAAjB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,+BAAjB;AACA,UAAKE,KAAL,GAAa,MAAKA,KAAL,CAAWF,IAAX,+BAAb;AARiB;AASlB;;;;gCAEW;AAAA;;AACV,WAAKG,QAAL,CAAc,UAACT,KAAD,EAAQC,KAAR,EAAkB;AAAA,YACtBC,GADsB,GACRD,KADQ,CACtBC,GADsB;AAAA,YACjBC,IADiB,GACRF,KADQ,CACjBE,IADiB;AAE9B,YAAGH,KAAK,CAACI,KAAN,IAAeF,GAAlB,EAAuB;AACvB,eAAO;AAAEE,UAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,GAAcD;AAAvB,SAAP;AACH,OAJC,EAKH,YAAM;AACJO,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,MAAI,CAACX,KAA1B;AACA,OAPC;AASH;;;gCAGa;AACV,WAAKS,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI,KAAX,GAAmB;AAA5B,OAAd;AACD;;;4BAEO;AACN,WAAKK,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD;;;6BAEQ;AAAA,UACCA,KADD,GACW,KAAKJ,KADhB,CACCI,KADD;AAGP,aACE;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsBA,KAAtB,CADF,EAEE;AAAS,QAAA,SAAS,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE,KAAKL,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAQ,QAAA,OAAO,EAAE,KAAKQ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAQ,QAAA,OAAO,EAAE,KAAKC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,CAFF,CADF;AAUD;;;;EA9CmBV,S;;AAiDtB,eAAeO,OAAf","sourcesContent":["import React, { Component } from 'react';\n\nconst increment = (state, props) => {\n  const { max, step } = props; \n  if(state.count >= max) return;\n  return { count: state.count + step};    \n};\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment() {\n    this.setState((state, props) => {\n      const { max, step } = props; \n      if(state.count >= max) return;\n      return { count: state.count + step};        \n  },\n () => {\n   console.log('After', this.state);\n  },\n );\n}\n    \n\n  decrement() {\n    this.setState({ count: this.state.count - 1 });\n  }\n\n  reset() {\n    this.setState({ count: 0 });\n  }\n\n  render() {\n    const { count } = this.state;\n\n    return (\n      <main className=\"Counter\">\n        <p className=\"count\">{count}</p>\n        <section className=\"controls\">\n          <button onClick={this.increment}>Increment</button>\n          <button onClick={this.decrement}>Decrement</button>\n          <button onClick={this.reset}>Reset</button>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}